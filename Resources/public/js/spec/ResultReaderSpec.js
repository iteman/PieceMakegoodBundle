/* vim: set expandtab tabstop=4 shiftwidth=4: */

/**
 * Copyright (c) 2011 KUBO Atsuhiro <kubo@iteman.jp>,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @package    PieceMakegoodBundle
 * @copyright  2011 KUBO Atsuhiro <kubo@iteman.jp>
 * @license    http://www.opensource.org/licenses/bsd-license.php  New BSD License
 * @version    Release: @package_version@
 * @since      File available since Release 0.1.0
 */

describe("ResultReader", function() {
    var resultAsJSON = [
"{\"testsuites\": null}",
"{\"testsuite\": {\"name\": \"The test suite generated by Stagehand_TestRunner\", \"tests\": 9}}",
"{\"testsuite\": {\"name\": \"Stagehand_TestRunner_PHPUnitPassTest\", \"tests\": 3, \"file\": \"/path/to/PHPUnitPassTest.php\"}}",
"{\"testcase\": {\"name\": \"passWithAnAssertion\", \"class\": \"Stagehand_TestRunner_PHPUnitPassTest\", \"file\": \"/path/to/PHPUnitPassTest.php\", \"line\": 54}}",
"{\"/testcase\": null}",
"{\"testcase\": {\"name\": \"passWithMultipleAssertions\", \"class\": \"Stagehand_TestRunner_PHPUnitPassTest\", \"file\": \"/path/to/PHPUnitPassTest.php\", \"line\":62}}",
"{\"/testcase\": null}",
"{\"testcase\": {\"name\": \"日本語を使用できる\", \"class\": \"Stagehand_TestRunner_PHPUnitPassTest\", \"file\": \"/path/to/PHPUnitPassTest.php\", \"line\": 71}}",
"{\"/testcase\": null}",
"{\"/testsuite\": null}",
"{\"testsuite\": {\"name\": \"Stagehand_TestRunner_PHPUnitFailureTest\", \"tests\": 1, \"file\": \"/path/to/PHPUnitFailureTest.php\"}}",
"{\"testcase\": {\"name\": \"isFailure\", \"class\": \"Stagehand_TestRunner_PHPUnitFailureTest\", \"file\": \"/path/to/PHPUnitFailureTest.php\", \"line\": 54}}",
"{\"failure\": {\"type\": \"PHPUnit_Framework_ExpectationFailedException\", \"file\": \"/path/to/PHPUnitFailureTest.php\", \"line\": 56, \"message\": \"Stagehand_TestRunner_PHPUnitFailureTest::isFailure&#10;&#10;This is an error message.&#10;Failed asserting that &lt;boolean:false&gt; is true.&#10;&#10;\", \"trace\": \"Stagehand_TestRunner_PHPUnitFailureTest::isFailure&#10;&#10;This is an error message.&#10;Failed asserting that &lt;boolean:false&gt; is true.&#10;&#10;/path/to/PHPUnitFailureTest.php:56&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/Runner/PHPUnitRunner.php:116&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunner.php:79&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:331&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:181&#10;/home/iteman/site-php/PEAR/Stagehand/CLIController.php:101&#10;/home/iteman/GITREPOS/stagehand-testrunner/bin/phpunitrunner:77&#10;\"}}",
"{\"/failure\": null}",
"{\"/testcase\": null}",
"{\"/testsuite\": null}",
"{\"testsuite\": {\"name\": \"Stagehand_TestRunner_PHPUnitErrorTest\", \"tests\": 1, \"file\": \"/path/to/PHPUnitErrorTest.php\"}}",
"{\"testcase\": {\"name\": \"isError\", \"class\": \"Stagehand_TestRunner_PHPUnitErrorTest\", \"file\": \"/path/to/PHPUnitErrorTest.php\",  \"line\": 54}}",
"{\"error\": {\"type\": \"PHPUnit_Framework_Error_Notice\", \"file\": \"/path/to/PHPUnitErrorTest.php\", \"line\": 56, \"message\": \"Stagehand_TestRunner_PHPUnitErrorTest::isError&#10;&#10;Undefined property: Stagehand_TestRunner_PHPUnitErrorTest::$foo&#10;&#10;\", \"trace\": \"Stagehand_TestRunner_PHPUnitErrorTest::isError&#10;&#10;Undefined property: Stagehand_TestRunner_PHPUnitErrorTest::$foo&#10;&#10;/path/to/PHPUnitErrorTest.php:56&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/Runner/PHPUnitRunner.php:116&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunner.php:79&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:331&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:181&#10;/home/iteman/site-php/PEAR/Stagehand/CLIController.php:101&#10;/home/iteman/GITREPOS/stagehand-testrunner/bin/phpunitrunner:77&#10;\"}}",
"{\"/error\": null}",
"{\"/testcase\": null}",
"{\"/testsuite\": null}",
"{\"testsuite\": {\"name\": \"Stagehand_TestRunner_PHPUnitDataProviderTest\", \"tests\": 4, \"file\": \"/path/to/PHPUnitDataProviderTest.php\"}}",
"{\"testsuite\": {\"name\": \"passWithDataProvider\", \"tests\": 4, \"file\": \"/path/to/PHPUnitDataProviderTest.php\"}}",
"{\"testcase\": {\"name\": \"passWithDataProvider with data set #0\", \"class\": \"Stagehand_TestRunner_PHPUnitDataProviderTest\", \"file\": \"/path/to/PHPUnitDataProviderTest.php\", \"line\": 53}}",
"{\"/testcase\": null}",
"{\"testcase\": {\"name\": \"passWithDataProvider with data set #1\", \"class\": \"Stagehand_TestRunner_PHPUnitDataProviderTest\", \"file\": \"/path/to/PHPUnitDataProviderTest.php\", \"line\": 53}}",
"{\"/testcase\": null}",
"{\"testcase\": {\"name\": \"passWithDataProvider with data set #2\", \"class\": \"Stagehand_TestRunner_PHPUnitDataProviderTest\", \"file\": \"/path/to/PHPUnitDataProviderTest.php\", \"line\": 53}}",
"{\"/testcase\": null}",
"{\"testcase\": {\"name\": \"passWithDataProvider with data set #3\", \"class\": \"Stagehand_TestRunner_PHPUnitDataProviderTest\", \"file\": \"/path/to/PHPUnitDataProviderTest.php\", \"line\": 53}}",
"{\"failure\": {\"type\": \"PHPUnit_Framework_ExpectationFailedException\", \"file\": \"/path/to/PHPUnitDataProviderTest.php\", \"line\": 55, \"message\": \"Stagehand_TestRunner_PHPUnitDataProviderTest::passWithDataProvider with data set #3 (1, 1, 3)&#10;&#10;Failed asserting that &lt;integer:2&gt; matches expected &lt;integer:3&gt;.&#10;&#10;\", \"trace\": \"Stagehand_TestRunner_PHPUnitDataProviderTest::passWithDataProvider with data set #3 (1, 1, 3)&#10;&#10;Failed asserting that &lt;integer:2&gt; matches expected &lt;integer:3&gt;.&#10;&#10;/path/to/PHPUnitDataProviderTest.php:55&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/Runner/PHPUnitRunner.php:116&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunner.php:79&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:331&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:181&#10;/home/iteman/site-php/PEAR/Stagehand/CLIController.php:101&#10;/home/iteman/GITREPOS/stagehand-testrunner/bin/phpunitrunner:77&#10;\"}}",
"{\"/failure\": null}",
"{\"/testcase\": null}",
"{\"/testsuite\": null}",
"{\"/testsuite\": null}",
"{\"/testsuite\": null}",
"{\"/testsuites\": null}",
];

    it("reads fragments of a result", function() {
        var reader = new Piece.MakeGood.Core.Run.ResultReader();
        for (var i = 0; i < resultAsJSON.length; ++i) {
            reader.read(resultAsJSON[i]);
        }

        var result = reader.getResult();
        expect(result.getName()).toEqual("The test suite generated by Stagehand_TestRunner");
        expect(result.getTime()).toBeUndefined();
        expect(result.getFile()).toBeUndefined();
        expect(result.getParent()).toBeUndefined();
        
        expect(result.hasErrors()).toBeTruthy();
        expect(result.hasFailures()).toBeTruthy();
        expect(result.getTestCount()).toEqual(9);
        expect(result.getErrorCount()).toEqual(1);
        expect(result.getFailureCount()).toEqual(2);
        expect(result.hasChildren()).toBeTruthy();
        expect(result.getSize()).toEqual(15);

        expect(result.getFullPackageName()).toBeUndefined();
        expect(result.getPackageName()).toBeUndefined();
        expect(result.getAllTestCount()).toEqual(9);

        expect(result.getPassCount()).toEqual(6);

        var testSuites = result.getChildren();
        expect(testSuites.length).toEqual(4);

        expect(testSuites[0].getName()).toEqual("Stagehand_TestRunner_PHPUnitPassTest");
        expect(testSuites[0].getTime()).toBeUndefined();
        expect(testSuites[0].getFile()).toEqual("/path/to/PHPUnitPassTest.php");
        expect(testSuites[0].getParent()).toEqual(result);
        
        expect(testSuites[0].hasErrors()).toBeFalsy();
        expect(testSuites[0].hasFailures()).toBeFalsy();
        expect(testSuites[0].getTestCount()).toEqual(3);
        expect(testSuites[0].getErrorCount()).toEqual(0);
        expect(testSuites[0].getFailureCount()).toEqual(0);
        expect(testSuites[0].hasChildren()).toBeTruthy();
        expect(testSuites[0].getSize()).toEqual(4);

        expect(testSuites[0].getFullPackageName()).toBeUndefined();
        expect(testSuites[0].getPackageName()).toBeUndefined();
        expect(testSuites[0].getAllTestCount()).toBeUndefined();

        expect(testSuites[0].getPassCount()).toEqual(3);

        var testCases = testSuites[0].getChildren();
        expect(testCases.length).toEqual(3);

        expect(testCases[0].getName()).toEqual("passWithAnAssertion");
        expect(testCases[0].getTime()).toBeUndefined();
        expect(testCases[0].getFile()).toEqual("/path/to/PHPUnitPassTest.php");
        expect(testCases[0].getParent()).toEqual(testSuites[0]);
        
        expect(testCases[0].hasErrors()).toBeFalsy();
        expect(testCases[0].hasFailures()).toBeFalsy();
        expect(testCases[0].getTestCount()).toEqual(1);
        expect(testCases[0].getErrorCount()).toEqual(0);
        expect(testCases[0].getFailureCount()).toEqual(0);
        expect(testCases[0].hasChildren()).toBeFalsy();
        expect(testCases[0].getSize()).toEqual(1);

        expect(testCases[0].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitPassTest");
        expect(testCases[0].getLine()).toEqual(54);
        expect(testCases[0].isArtificial()).toBeFalsy();
        expect(testCases[0].getFailureType()).toBeUndefined();
        expect(testCases[0].getFailureTrace()).toBeUndefined();
        expect(testCases[0].isFixed()).toBeTruthy();
        expect(testCases[0].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.PASS);
        expect(testCases[0].getFailureMessage()).toBeUndefined();

        expect(testCases[1].getName()).toEqual("passWithMultipleAssertions");
        expect(testCases[1].getTime()).toBeUndefined();
        expect(testCases[1].getFile()).toEqual("/path/to/PHPUnitPassTest.php");
        expect(testCases[1].getParent()).toEqual(testSuites[0]);
        
        expect(testCases[1].hasErrors()).toBeFalsy();
        expect(testCases[1].hasFailures()).toBeFalsy();
        expect(testCases[1].getTestCount()).toEqual(1);
        expect(testCases[1].getErrorCount()).toEqual(0);
        expect(testCases[1].getFailureCount()).toEqual(0);
        expect(testCases[1].hasChildren()).toBeFalsy();
        expect(testCases[1].getSize()).toEqual(1);

        expect(testCases[1].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitPassTest");
        expect(testCases[1].getLine()).toEqual(62);
        expect(testCases[1].isArtificial()).toBeFalsy();
        expect(testCases[1].getFailureType()).toBeUndefined();
        expect(testCases[1].getFailureTrace()).toBeUndefined();
        expect(testCases[1].isFixed()).toBeTruthy();
        expect(testCases[1].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.PASS);
        expect(testCases[1].getFailureMessage()).toBeUndefined();

        expect(testCases[2].getName()).toEqual("日本語を使用できる");
        expect(testCases[2].getTime()).toBeUndefined();
        expect(testCases[2].getFile()).toEqual("/path/to/PHPUnitPassTest.php");
        expect(testCases[2].getParent()).toEqual(testSuites[0]);
        
        expect(testCases[2].hasErrors()).toBeFalsy();
        expect(testCases[2].hasFailures()).toBeFalsy();
        expect(testCases[2].getTestCount()).toEqual(1);
        expect(testCases[2].getErrorCount()).toEqual(0);
        expect(testCases[2].getFailureCount()).toEqual(0);
        expect(testCases[2].hasChildren()).toBeFalsy();
        expect(testCases[2].getSize()).toEqual(1);

        expect(testCases[2].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitPassTest");
        expect(testCases[2].getLine()).toEqual(71);
        expect(testCases[2].isArtificial()).toBeFalsy();
        expect(testCases[2].getFailureType()).toBeUndefined();
        expect(testCases[2].getFailureTrace()).toBeUndefined();
        expect(testCases[2].isFixed()).toBeTruthy();
        expect(testCases[2].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.PASS);
        expect(testCases[2].getFailureMessage()).toBeUndefined();

        expect(testSuites[1].getName()).toEqual("Stagehand_TestRunner_PHPUnitFailureTest");
        expect(testSuites[1].getTime()).toBeUndefined();
        expect(testSuites[1].getFile()).toEqual("/path/to/PHPUnitFailureTest.php");
        expect(testSuites[1].getParent()).toEqual(result);
        
        expect(testSuites[1].hasErrors()).toBeFalsy();
        expect(testSuites[1].hasFailures()).toBeTruthy();
        expect(testSuites[1].getTestCount()).toEqual(1);
        expect(testSuites[1].getErrorCount()).toEqual(0);
        expect(testSuites[1].getFailureCount()).toEqual(1);
        expect(testSuites[1].hasChildren()).toBeTruthy();
        expect(testSuites[1].getSize()).toEqual(2);

        expect(testSuites[1].getFullPackageName()).toBeUndefined();
        expect(testSuites[1].getPackageName()).toBeUndefined();
        expect(testSuites[1].getAllTestCount()).toBeUndefined();

        expect(testSuites[1].getPassCount()).toEqual(0);

        testCases = testSuites[1].getChildren();
        expect(testCases.length).toEqual(1);

        expect(testCases[0].getName()).toEqual("isFailure");
        expect(testCases[0].getTime()).toBeUndefined();
        expect(testCases[0].getFile()).toEqual("/path/to/PHPUnitFailureTest.php");
        expect(testCases[0].getParent()).toEqual(testSuites[1]);
        
        expect(testCases[0].hasErrors()).toBeFalsy();
        expect(testCases[0].hasFailures()).toBeTruthy();
        expect(testCases[0].getTestCount()).toEqual(1);
        expect(testCases[0].getErrorCount()).toEqual(0);
        expect(testCases[0].getFailureCount()).toEqual(1);
        expect(testCases[0].hasChildren()).toBeFalsy();
        expect(testCases[0].getSize()).toEqual(1);

        expect(testCases[0].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitFailureTest");
        expect(testCases[0].getLine()).toEqual(56);
        expect(testCases[0].isArtificial()).toBeFalsy();
        expect(testCases[0].getFailureType()).toEqual("PHPUnit_Framework_ExpectationFailedException");
        expect(testCases[0].getFailureTrace()).toEqual("Stagehand_TestRunner_PHPUnitFailureTest::isFailure&#10;&#10;This is an error message.&#10;Failed asserting that &lt;boolean:false&gt; is true.&#10;&#10;/path/to/PHPUnitFailureTest.php:56&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/Runner/PHPUnitRunner.php:116&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunner.php:79&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:331&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:181&#10;/home/iteman/site-php/PEAR/Stagehand/CLIController.php:101&#10;/home/iteman/GITREPOS/stagehand-testrunner/bin/phpunitrunner:77&#10;");
        expect(testCases[0].isFixed()).toBeTruthy();
        expect(testCases[0].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.FAILURE);
        expect(testCases[0].getFailureMessage()).toEqual("Stagehand_TestRunner_PHPUnitFailureTest::isFailure&#10;&#10;This is an error message.&#10;Failed asserting that &lt;boolean:false&gt; is true.&#10;&#10;");

        expect(testSuites[2].getName()).toEqual("Stagehand_TestRunner_PHPUnitErrorTest");
        expect(testSuites[2].getTime()).toBeUndefined();
        expect(testSuites[2].getFile()).toEqual("/path/to/PHPUnitErrorTest.php");
        expect(testSuites[2].getParent()).toEqual(result);
        
        expect(testSuites[2].hasErrors()).toBeTruthy();
        expect(testSuites[2].hasFailures()).toBeFalsy();
        expect(testSuites[2].getTestCount()).toEqual(1);
        expect(testSuites[2].getErrorCount()).toEqual(1);
        expect(testSuites[2].getFailureCount()).toEqual(0);
        expect(testSuites[2].hasChildren()).toBeTruthy();
        expect(testSuites[2].getSize()).toEqual(2);

        expect(testSuites[2].getFullPackageName()).toBeUndefined();
        expect(testSuites[2].getPackageName()).toBeUndefined();
        expect(testSuites[2].getAllTestCount()).toBeUndefined();

        expect(testSuites[2].getPassCount()).toEqual(0);

        testCases = testSuites[2].getChildren();
        expect(testCases.length).toEqual(1);

        expect(testCases[0].getName()).toEqual("isError");
        expect(testCases[0].getTime()).toBeUndefined();
        expect(testCases[0].getFile()).toEqual("/path/to/PHPUnitErrorTest.php");
        expect(testCases[0].getParent()).toEqual(testSuites[2]);
        
        expect(testCases[0].hasErrors()).toBeTruthy();
        expect(testCases[0].hasFailures()).toBeFalsy();
        expect(testCases[0].getTestCount()).toEqual(1);
        expect(testCases[0].getErrorCount()).toEqual(1);
        expect(testCases[0].getFailureCount()).toEqual(0);
        expect(testCases[0].hasChildren()).toBeFalsy();
        expect(testCases[0].getSize()).toEqual(1);

        expect(testCases[0].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitErrorTest");
        expect(testCases[0].getLine()).toEqual(56);
        expect(testCases[0].isArtificial()).toBeFalsy();
        expect(testCases[0].getFailureType()).toEqual("PHPUnit_Framework_Error_Notice");
        expect(testCases[0].getFailureTrace()).toEqual("Stagehand_TestRunner_PHPUnitErrorTest::isError&#10;&#10;Undefined property: Stagehand_TestRunner_PHPUnitErrorTest::$foo&#10;&#10;/path/to/PHPUnitErrorTest.php:56&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/Runner/PHPUnitRunner.php:116&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunner.php:79&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:331&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:181&#10;/home/iteman/site-php/PEAR/Stagehand/CLIController.php:101&#10;/home/iteman/GITREPOS/stagehand-testrunner/bin/phpunitrunner:77&#10;");
        expect(testCases[0].isFixed()).toBeTruthy();
        expect(testCases[0].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.ERROR);
        expect(testCases[0].getFailureMessage()).toEqual("Stagehand_TestRunner_PHPUnitErrorTest::isError&#10;&#10;Undefined property: Stagehand_TestRunner_PHPUnitErrorTest::$foo&#10;&#10;");

        expect(testSuites[3].getName()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest");
        expect(testSuites[3].getTime()).toBeUndefined();
        expect(testSuites[3].getFile()).toEqual("/path/to/PHPUnitDataProviderTest.php");
        expect(testSuites[3].getParent()).toEqual(result);
        
        expect(testSuites[3].hasErrors()).toBeFalsy();
        expect(testSuites[3].hasFailures()).toBeTruthy();
        expect(testSuites[3].getTestCount()).toEqual(4);
        expect(testSuites[3].getErrorCount()).toEqual(0);
        expect(testSuites[3].getFailureCount()).toEqual(1);
        expect(testSuites[3].hasChildren()).toBeTruthy();
        expect(testSuites[3].getSize()).toEqual(6);

        expect(testSuites[3].getFullPackageName()).toBeUndefined();
        expect(testSuites[3].getPackageName()).toBeUndefined();
        expect(testSuites[3].getAllTestCount()).toBeUndefined();

        expect(testSuites[3].getPassCount()).toEqual(3);

        expect(testSuites[3].getChildren().length).toEqual(1);

        expect(testSuites[3].getChildren()[0].getName()).toEqual("passWithDataProvider");
        expect(testSuites[3].getChildren()[0].getTime()).toBeUndefined();
        expect(testSuites[3].getChildren()[0].getFile()).toEqual("/path/to/PHPUnitDataProviderTest.php");
        expect(testSuites[3].getChildren()[0].getParent()).toEqual(testSuites[3]);

        expect(testSuites[3].getChildren()[0].hasErrors()).toBeFalsy();
        expect(testSuites[3].getChildren()[0].hasFailures()).toBeTruthy();
        expect(testSuites[3].getChildren()[0].getTestCount()).toEqual(4);
        expect(testSuites[3].getChildren()[0].getErrorCount()).toEqual(0);
        expect(testSuites[3].getChildren()[0].getFailureCount()).toEqual(1);
        expect(testSuites[3].getChildren()[0].hasChildren()).toBeTruthy();
        expect(testSuites[3].getChildren()[0].getSize()).toEqual(5);

        expect(testSuites[3].getChildren()[0].getFullPackageName()).toBeUndefined();
        expect(testSuites[3].getChildren()[0].getPackageName()).toBeUndefined();
        expect(testSuites[3].getChildren()[0].getAllTestCount()).toBeUndefined();

        expect(testSuites[3].getChildren()[0].getPassCount()).toEqual(3);

        testCases = testSuites[3].getChildren()[0].getChildren();
        expect(testCases.length).toEqual(4);

        expect(testCases[0].getName()).toEqual("passWithDataProvider with data set #0");
        expect(testCases[0].getTime()).toBeUndefined();
        expect(testCases[0].getFile()).toEqual("/path/to/PHPUnitDataProviderTest.php");
        expect(testCases[0].getParent()).toEqual(testSuites[3].getChildren()[0]);
        
        expect(testCases[0].hasErrors()).toBeFalsy();
        expect(testCases[0].hasFailures()).toBeFalsy();
        expect(testCases[0].getTestCount()).toEqual(1);
        expect(testCases[0].getErrorCount()).toEqual(0);
        expect(testCases[0].getFailureCount()).toEqual(0);
        expect(testCases[0].hasChildren()).toBeFalsy();
        expect(testCases[0].getSize()).toEqual(1);

        expect(testCases[0].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest");
        expect(testCases[0].getLine()).toEqual(53);
        expect(testCases[0].isArtificial()).toBeFalsy();
        expect(testCases[0].getFailureType()).toBeUndefined();
        expect(testCases[0].getFailureTrace()).toBeUndefined();
        expect(testCases[0].isFixed()).toBeTruthy();
        expect(testCases[0].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.PASS);
        expect(testCases[0].getFailureMessage()).toBeUndefined();

        expect(testCases[1].getName()).toEqual("passWithDataProvider with data set #1");
        expect(testCases[1].getTime()).toBeUndefined();
        expect(testCases[1].getFile()).toEqual("/path/to/PHPUnitDataProviderTest.php");
        expect(testCases[1].getParent()).toEqual(testSuites[3].getChildren()[0]);
        
        expect(testCases[1].hasErrors()).toBeFalsy();
        expect(testCases[1].hasFailures()).toBeFalsy();
        expect(testCases[1].getTestCount()).toEqual(1);
        expect(testCases[1].getErrorCount()).toEqual(0);
        expect(testCases[1].getFailureCount()).toEqual(0);
        expect(testCases[1].hasChildren()).toBeFalsy();
        expect(testCases[1].getSize()).toEqual(1);

        expect(testCases[1].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest");
        expect(testCases[1].getLine()).toEqual(53);
        expect(testCases[1].isArtificial()).toBeFalsy();
        expect(testCases[1].getFailureType()).toBeUndefined();
        expect(testCases[1].getFailureTrace()).toBeUndefined();
        expect(testCases[1].isFixed()).toBeTruthy();
        expect(testCases[1].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.PASS);
        expect(testCases[1].getFailureMessage()).toBeUndefined();

        expect(testCases[2].getName()).toEqual("passWithDataProvider with data set #2");
        expect(testCases[2].getTime()).toBeUndefined();
        expect(testCases[2].getFile()).toEqual("/path/to/PHPUnitDataProviderTest.php");
        expect(testCases[2].getParent()).toEqual(testSuites[3].getChildren()[0]);
        
        expect(testCases[2].hasErrors()).toBeFalsy();
        expect(testCases[2].hasFailures()).toBeFalsy();
        expect(testCases[2].getTestCount()).toEqual(1);
        expect(testCases[2].getErrorCount()).toEqual(0);
        expect(testCases[2].getFailureCount()).toEqual(0);
        expect(testCases[2].hasChildren()).toBeFalsy();
        expect(testCases[2].getSize()).toEqual(1);

        expect(testCases[2].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest");
        expect(testCases[2].getLine()).toEqual(53);
        expect(testCases[2].isArtificial()).toBeFalsy();
        expect(testCases[2].getFailureType()).toBeUndefined();
        expect(testCases[2].getFailureTrace()).toBeUndefined();
        expect(testCases[2].isFixed()).toBeTruthy();
        expect(testCases[2].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.PASS);
        expect(testCases[2].getFailureMessage()).toBeUndefined();

        expect(testCases[3].getName()).toEqual("passWithDataProvider with data set #3");
        expect(testCases[3].getTime()).toBeUndefined();
        expect(testCases[3].getFile()).toEqual("/path/to/PHPUnitDataProviderTest.php");
        expect(testCases[3].getParent()).toEqual(testSuites[3].getChildren()[0]);
        
        expect(testCases[3].hasErrors()).toBeFalsy();
        expect(testCases[3].hasFailures()).toBeTruthy();
        expect(testCases[3].getTestCount()).toEqual(1);
        expect(testCases[3].getErrorCount()).toEqual(0);
        expect(testCases[3].getFailureCount()).toEqual(1);
        expect(testCases[3].hasChildren()).toBeFalsy();
        expect(testCases[3].getSize()).toEqual(1);

        expect(testCases[3].getClassName()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest");
        expect(testCases[3].getLine()).toEqual(55);
        expect(testCases[3].isArtificial()).toBeFalsy();
        expect(testCases[3].getFailureType()).toEqual("PHPUnit_Framework_ExpectationFailedException");
        expect(testCases[3].getFailureTrace()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest::passWithDataProvider with data set #3 (1, 1, 3)&#10;&#10;Failed asserting that &lt;integer:2&gt; matches expected &lt;integer:3&gt;.&#10;&#10;/path/to/PHPUnitDataProviderTest.php:55&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/Runner/PHPUnitRunner.php:116&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunner.php:79&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:331&#10;/home/iteman/GITREPOS/stagehand-testrunner/src/Stagehand/TestRunner/TestRunnerCLIController.php:181&#10;/home/iteman/site-php/PEAR/Stagehand/CLIController.php:101&#10;/home/iteman/GITREPOS/stagehand-testrunner/bin/phpunitrunner:77&#10;");
        expect(testCases[3].isFixed()).toBeTruthy();
        expect(testCases[3].getResultType()).toEqual(Piece.MakeGood.Core.Result.ResultType.my.FAILURE);
        expect(testCases[3].getFailureMessage()).toEqual("Stagehand_TestRunner_PHPUnitDataProviderTest::passWithDataProvider with data set #3 (1, 1, 3)&#10;&#10;Failed asserting that &lt;integer:2&gt; matches expected &lt;integer:3&gt;.&#10;&#10;");
    });
});

/*
 * Local Variables:
 * mode: js
 * coding: utf-8
 * tab-width: 4
 * c-basic-offset: 4
 * c-hanging-comment-ender-p: nil
 * indent-tabs-mode: nil
 * End:
 */
